#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Oct 21 15:40:35 2020@author: jeffreysun"""# importsimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdfrom keras.models import Sequentialfrom keras.layers import LSTM, Dense, Dropout, Bidirectionalfrom sklearn.preprocessing import MinMaxScaler# preprocessingFULL_DATA_FILEPATH = '/Users/jeffreysun/Desktop/my-ml-projects/temperature/GlobalTemperatures.csv'data = pd.read_csv(FULL_DATA_FILEPATH)data = data[data.index > 1050]data = data[data.index % 12 == 6] data = data.dropna(subset=['LandAverageTemperature'])data = data.iloc[:, 1].valuesdata = data * (9/5) + 32training_set = data.reshape(-1, 1)# normalizationsc = MinMaxScaler(feature_range=(0, 1))training_set_scaled = sc.fit_transform(training_set)x_train = []y_train = []n_future = 2n_past = 30# creating input and output arraysfor i in range(0, len(training_set_scaled)-n_past-n_future+1):    x_train.append(training_set_scaled[i : i + n_past , 0])         y_train.append(training_set_scaled[i + n_past : i + n_past + n_future , 0 ])x_train, y_train = np.array(x_train), np.array(y_train)x_train = np.reshape(x_train, (x_train.shape[0] , x_train.shape[1], 1) )# RNN model for regressionregressor = Sequential()regressor.add(Bidirectional(LSTM(units=30, return_sequences=True, input_shape = (x_train.shape[1],1) ) ))regressor.add(Dropout(0.2))regressor.add(LSTM(units= 30 , return_sequences=True))regressor.add(Dropout(0.2))regressor.add(LSTM(units= 30 , return_sequences=True))regressor.add(Dropout(0.2))regressor.add(LSTM(units= 30))regressor.add(Dropout(0.2))regressor.add(Dense(units = n_future,activation='linear'))regressor.compile(optimizer='adam', loss='mean_squared_error',metrics=['acc'])history = regressor.fit(x_train, y_train, epochs=100,batch_size=32 )# plot loss using matplotlibplt.plot(history.history['loss'])plt.title('Model loss') plt.ylabel('Loss') plt.xlabel('Epoch') plt.legend(['Train', 'Test'], loc='upper left') plt.show()